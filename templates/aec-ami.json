{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Acqueon Engagement Cloud (Worker Template) for Amazon Connect (qs-)",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Amazon EC2 Configuration"
                    },
                    "Parameters": [
                        "EC2InstanceType",
                        "KeyPairName",
                        "AECVPC",
                        "AECSubnetPublic1",
                        "AECSubnetPublic2",
                        "AECSubnetPrivate1",
                        "AECSubnetPrivate2"
                    ]
                },
                {
                    "Label": {
                        "default": "SecurityGroup Configuration"
                    },
                    "Parameters": [
                        "AECWeb",
                        "AECPrivateGroup",
                        "AECRDP"
                    ]
                },
                {
                    "Label": {
                        "default": "Amazon RDS Configuration"
                    },
                    "Parameters": [
                        "RDSDB",
                        "DBMasterUser",
                        "DBMasterPassword"
                    ]
                },
                {
                    "Label": {
                        "default": "SSL Configuration"
                    },
                    "Parameters": [
                        "DomainHostedZone",
                        "CFDomainName",
                        "CFCertificate",
                        "ELBCertificate"
                    ]
                }
            ],
            "ParameterLabels": {
                "EC2InstanceType": {
                    "default": "Instance Type"
                },
                "KeyPairName": {
                    "default": "Key Name"
                },
                "AECVPC": {
                    "default": "VPC"
                },
                "AECSubnetPublic1": {
                    "default": "Public Subnet 1"
                },
                "AECSubnetPublic2": {
                    "default": "Public Subnet 2"
                },
                "AECSubnetPrivate1": {
                    "default": "Private Subnet 1"
                },
                "AECSubnetPrivate2": {
                    "default": "Private Subnet 2"
                },
                "AECWeb": {
                    "default": "Public ELB SecurityGroup"
                },
                "AECPrivateGroup": {
                    "default": "Private ELB SecurityGroup"
                },
                "AECRDP": {
                    "default": "RDP SecurityGroup"
                },
                "RDSDB": {
                    "default": "DB Instance Name"
                },
                "DBMasterUser": {
                    "default": "DB Master User"
                },
                "DBMasterPassword": {
                    "default": "DB Master Password"
                },
                "DomainHostedZone": {
                    "default": "Hosted Zone"
                },
                "CFDomainName": {
                    "default": "CF DomainName"
                },
                "CFCertificate": {
                    "default": "CF Certificate ARN"
                },
                "ELBCertificate": {
                    "default": "ELB Certificate ARN"
                }
            }
        }
    },
    "Parameters": {
        "EC2InstanceType": {
            "Type": "String",
            "Default": "Option-1a",
            "AllowedValues": [
                "Option-1a",
                "Option-1b",
                "Option-2a",
                "Option-2b",
                "Option-3"
            ],
            "Description": "Refer 'AEC Capacity and Sizing section' of 'AEC Installation Guide' to select appropriate EC2 InstanceType"
        },
        "KeyPairName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
        },
        "AECWeb": {
            "Type": "AWS::EC2::SecurityGroup::Id",
            "Description": "SecurityGroup for Public ELB"
        },
        "AECPrivateGroup": {
            "Type": "AWS::EC2::SecurityGroup::Id",
            "Description": "SecurityGroup for Private ELB"
        },
        "AECRDP": {
            "Type": "AWS::EC2::SecurityGroup::Id",
            "Description": "SecurityGroup for BastionHost RDP"
        },
        "AECSubnetPublic1": {
            "Type": "AWS::EC2::Subnet::Id"
        },
        "AECSubnetPublic2": {
            "Type": "AWS::EC2::Subnet::Id"
        },
        "AECSubnetPrivate1": {
            "Type": "AWS::EC2::Subnet::Id"
        },
        "AECSubnetPrivate2": {
            "Type": "AWS::EC2::Subnet::Id"
        },
        "AECVPC": {
            "Type": "AWS::EC2::VPC::Id"
        },
        "RDSDB": {
            "Description": "RDS DB Instance Name",
            "Type": "String"
        },
        "DBMasterUser": {
            "Description": "RDS Master UserName",
            "Type": "String",
            "MinLength": "2",
            "MaxLength": "25"
        },
        "DBMasterPassword": {
            "Description": "RDS Master Password",
            "Type": "String",
            "MinLength": "3",
            "MaxLength": "25",
            "NoEcho": true
        },
        "CFDomainName": {
            "Description": "Alternate domain name for CloudFront",
            "Type": "String"
        },
        "CFCertificate": {
            "Description": "Certificate ARN for CloudFront. (Need to be created/imported in us-east-1 region)",
            "Type": "String"
        },
        "ELBCertificate": {
            "Description": "Certificate ARN for ELB. (Need to be created/imported in stack region )",
            "Type": "String"
        },
        "DomainHostedZone": {
            "Description": "Hosted Zone of the Domain",
            "Type": "AWS::Route53::HostedZone::Id"
        }
    },
    "Mappings": {
        "EC2VolumeMap": {
            "Option-1a": {
                "ec2instancetype": "t2.xlarge",
                "west3ec2instancetype": "t2.xlarge",
                "volumesize": "200",
                "rdsinstancetype": "db.m4.xlarge",
                "rdsvolumesize": "200",
                "west3rdsinstancetype": "db.r4.xlarge"
            },
            "Option-1b": {
                "ec2instancetype": "t2.2xlarge",
                "west3ec2instancetype": "t2.2xlarge",
                "volumesize": "500",
                "rdsinstancetype": "db.m4.2xlarge",
                "rdsvolumesize": "1200",
                "west3rdsinstancetype": "db.r4.2xlarge"
            },
            "Option-2a": {
                "ec2instancetype": "m4.xlarge",
                "west3ec2instancetype": "m5.xlarge",
                "volumesize": "200",
                "rdsinstancetype": "db.m4.xlarge",
                "rdsvolumesize": "200",
                "west3rdsinstancetype": "db.r4.xlarge"
            },
            "Option-2b": {
                "ec2instancetype": "m4.2xlarge",
                "west3ec2instancetype": "m5.2xlarge",
                "volumesize": "500",
                "rdsinstancetype": "db.m4.2xlarge",
                "rdsvolumesize": "1200",
                "west3rdsinstancetype": "db.r4.2xlarge"
            },
            "Option-3": {
                "ec2instancetype": "m4.4xlarge",
                "west3ec2instancetype": "m5.4xlarge",
                "volumesize": "800",
                "rdsinstancetype": "db.m4.2xlarge",
                "rdsvolumesize": "2000",
                "west3rdsinstancetype": "db.r4.2xlarge"
            }
        },
        "RegionMap": {
            "us-east-1": {
                "asimg": "ami-012cc189997301fa4",
                "bastionimg": "ami-0327667c"
            },
            "us-east-2": {
                "asimg": "ami-0af052d34eb909c12",
                "bastionimg": "ami-3bfac45e"
            },
            "us-west-1": {
                "asimg": "ami-0f655a69cf466dc11",
                "bastionimg": "ami-b236d2d1"
            },
            "us-west-2": {
                "asimg": "ami-00e22ee023260dea2",
                "bastionimg": "ami-3703414f"
            },
            "ap-south-1": {
                "asimg": "ami-028957acdf096e3d8",
                "bastionimg": "ami-5f95bd30"
            },
            "ap-northeast-2": {
                "asimg": "ami-05c8d48a9db129a14",
                "bastionimg": "ami-7969c317"
            },
            "ap-southeast-1": {
                "asimg": "ami-0964747a7e782b7aa",
                "bastionimg": "ami-053d3a79"
            },
            "ap-southeast-2": {
                "asimg": "ami-031c5eb5e7239a23e",
                "bastionimg": "ami-42f02f20"
            },
            "ap-northeast-1": {
                "asimg": "ami-0d34aee7452e1ef86",
                "bastionimg": "ami-120cc36d"
            },
            "ca-central-1": {
                "asimg": "ami-071e2fe6ce66a1119",
                "bastionimg": "ami-140b8870"
            },
            "eu-central-1": {
                "asimg": "ami-0dec98f9e5409d82a",
                "bastionimg": "ami-63f5c688"
            },
            "eu-west-1": {
                "asimg": "ami-0455a051c140f7da5",
                "bastionimg": "ami-987a76e1"
            },
            "eu-west-2": {
                "asimg": "ami-008d4fa5a6de602cb",
                "bastionimg": "ami-479b7520"
            },
            "eu-west-3": {
                "asimg": "ami-069d3c264a8009e07",
                "bastionimg": "ami-1511a068"
            },
            "sa-east-1": {
                "asimg": "ami-03a7ad8f4e53996a4",
                "bastionimg": "ami-ff6e3593"
            }
        }
    },
    "Conditions": {
        "HasHttps": {
            "Fn::And": [
                {
                    "Fn::Not": [
                        {
                            "Fn::Equals": [
                                "",
                                {
                                    "Ref": "CFDomainName"
                                }
                            ]
                        }
                    ]
                },
                {
                    "Fn::Not": [
                        {
                            "Fn::Equals": [
                                "",
                                {
                                    "Ref": "CFCertificate"
                                }
                            ]
                        }
                    ]
                },
                {
                    "Fn::Not": [
                        {
                            "Fn::Equals": [
                                "",
                                {
                                    "Ref": "ELBCertificate"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "West3Region": {
            "Fn::Equals": [
                "eu-west-3",
                {
                    "Ref": "AWS::Region"
                }
            ]
        }
    },
    "Resources": {
        "AECLB": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            "AEC",
                            {
                                "Fn::Select": [
                                    0,
                                    {
                                        "Fn::Split": [
                                            "-",
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "Fn::Select": [
                                    1,
                                    {
                                        "Fn::Split": [
                                            "-",
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    ]
                },
                "Subnets": [
                    {
                        "Ref": "AECSubnetPublic1"
                    },
                    {
                        "Ref": "AECSubnetPublic2"
                    }
                ],
                "SecurityGroups": [
                    {
                        "Ref": "AECWeb"
                    }
                ]
            }
        },
        "ServiceLB": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            "AEC-Service",
                            {
                                "Fn::Select": [
                                    0,
                                    {
                                        "Fn::Split": [
                                            "-",
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "Fn::Select": [
                                    1,
                                    {
                                        "Fn::Split": [
                                            "-",
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    ]
                },
                "Scheme": "internal",
                "Subnets": [
                    {
                        "Ref": "AECSubnetPrivate1"
                    },
                    {
                        "Ref": "AECSubnetPrivate2"
                    }
                ],
                "SecurityGroups": [
                    {
                        "Ref": "AECPrivateGroup"
                    }
                ]
            }
        },
        "LCMTargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "HealthCheckIntervalSeconds": 10,
                "UnhealthyThresholdCount": 2,
                "HealthyThresholdCount": 2,
                "HealthCheckProtocol": "HTTP",
                "HealthCheckTimeoutSeconds": 5,
                "HealthCheckPath": "/status",
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            "AEC-LCM",
                            {
                                "Fn::Select": [
                                    0,
                                    {
                                        "Fn::Split": [
                                            "-",
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "Fn::Select": [
                                    1,
                                    {
                                        "Fn::Split": [
                                            "-",
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    ]
                },
                "Port": 80,
                "Protocol": "HTTP",
                "Matcher": {
                    "HttpCode": "200,301"
                },
                "VpcId": {
                    "Ref": "AECVPC"
                },
                "TargetGroupAttributes": [
                    {
                        "Value": "true",
                        "Key": "stickiness.enabled"
                    },
                    {
                        "Value": "300",
                        "Key": "deregistration_delay.timeout_seconds"
                    },
                    {
                        "Value": "lb_cookie",
                        "Key": "stickiness.type"
                    },
                    {
                        "Value": "86400",
                        "Key": "stickiness.lb_cookie.duration_seconds"
                    }
                ]
            }
        },
        "ScriptEngineTargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "HealthCheckIntervalSeconds": 10,
                "UnhealthyThresholdCount": 2,
                "HealthyThresholdCount": 2,
                "HealthCheckProtocol": "HTTP",
                "HealthCheckTimeoutSeconds": 5,
                "HealthCheckPath": "/LCMScriptEngine/ScriptEngine",
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            "AEC-SE",
                            {
                                "Fn::Select": [
                                    0,
                                    {
                                        "Fn::Split": [
                                            "-",
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "Fn::Select": [
                                    1,
                                    {
                                        "Fn::Split": [
                                            "-",
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    ]
                },
                "Port": 80,
                "Protocol": "HTTP",
                "Matcher": {
                    "HttpCode": "200"
                },
                "VpcId": {
                    "Ref": "AECVPC"
                },
                "TargetGroupAttributes": [
                    {
                        "Value": "true",
                        "Key": "stickiness.enabled"
                    },
                    {
                        "Value": "300",
                        "Key": "deregistration_delay.timeout_seconds"
                    },
                    {
                        "Value": "lb_cookie",
                        "Key": "stickiness.type"
                    },
                    {
                        "Value": "86400",
                        "Key": "stickiness.lb_cookie.duration_seconds"
                    }
                ]
            }
        },
        "LicenseManagerTargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "HealthCheckIntervalSeconds": 10,
                "UnhealthyThresholdCount": 2,
                "HealthyThresholdCount": 2,
                "HealthCheckProtocol": "HTTP",
                "HealthCheckTimeoutSeconds": 5,
                "HealthCheckPath": "/LCMLicenseManager/Service",
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            "AEC-LM",
                            {
                                "Fn::Select": [
                                    0,
                                    {
                                        "Fn::Split": [
                                            "-",
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "Fn::Select": [
                                    1,
                                    {
                                        "Fn::Split": [
                                            "-",
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    ]
                },
                "Port": 80,
                "Protocol": "HTTP",
                "Matcher": {
                    "HttpCode": "200"
                },
                "VpcId": {
                    "Ref": "AECVPC"
                },
                "TargetGroupAttributes": [
                    {
                        "Value": "true",
                        "Key": "stickiness.enabled"
                    },
                    {
                        "Value": "300",
                        "Key": "deregistration_delay.timeout_seconds"
                    },
                    {
                        "Value": "lb_cookie",
                        "Key": "stickiness.type"
                    },
                    {
                        "Value": "86400",
                        "Key": "stickiness.lb_cookie.duration_seconds"
                    }
                ]
            }
        },
        "Instance1GenericServiceTargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "HealthCheckIntervalSeconds": 10,
                "UnhealthyThresholdCount": 2,
                "HealthyThresholdCount": 2,
                "HealthCheckProtocol": "HTTP",
                "HealthCheckTimeoutSeconds": 5,
                "HealthCheckPath": "/instance1LCMGenericService/Service1",
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            "AEC-GS",
                            {
                                "Fn::Select": [
                                    0,
                                    {
                                        "Fn::Split": [
                                            "-",
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "Fn::Select": [
                                    1,
                                    {
                                        "Fn::Split": [
                                            "-",
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    ]
                },
                "Port": 80,
                "Protocol": "HTTP",
                "Matcher": {
                    "HttpCode": "200"
                },
                "VpcId": {
                    "Ref": "AECVPC"
                },
                "TargetGroupAttributes": [
                    {
                        "Value": "true",
                        "Key": "stickiness.enabled"
                    },
                    {
                        "Value": "300",
                        "Key": "deregistration_delay.timeout_seconds"
                    },
                    {
                        "Value": "lb_cookie",
                        "Key": "stickiness.type"
                    },
                    {
                        "Value": "86400",
                        "Key": "stickiness.lb_cookie.duration_seconds"
                    }
                ]
            }
        },
        "AECLBListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "DefaultActions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "LCMTargetGroup"
                        }
                    }
                ],
                "LoadBalancerArn": {
                    "Ref": "AECLB"
                },
                "Port": {
                    "Fn::If": [
                        "HasHttps",
                        "443",
                        "80"
                    ]
                },
                "Protocol": {
                    "Fn::If": [
                        "HasHttps",
                        "HTTPS",
                        "HTTP"
                    ]
                },
                "Certificates": {
                    "Fn::If": [
                        "HasHttps",
                        [
                            {
                                "CertificateArn": {
                                    "Ref": "ELBCertificate"
                                }
                            }
                        ],
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                }
            }
        },
        "ServiceLBListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "DefaultActions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "ScriptEngineTargetGroup"
                        }
                    }
                ],
                "LoadBalancerArn": {
                    "Ref": "ServiceLB"
                },
                "Port": "80",
                "Protocol": "HTTP"
            }
        },
        "ScriptEngineListenerRule": {
            "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
            "Properties": {
                "Actions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "ScriptEngineTargetGroup"
                        }
                    }
                ],
                "Conditions": [
                    {
                        "Field": "path-pattern",
                        "Values": [
                            "/LCMScriptEngine/ScriptEngine"
                        ]
                    }
                ],
                "ListenerArn": {
                    "Ref": "ServiceLBListener"
                },
                "Priority": 1
            }
        },
        "LicenseManagerListenerRule": {
            "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
            "Properties": {
                "Actions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "LicenseManagerTargetGroup"
                        }
                    }
                ],
                "Conditions": [
                    {
                        "Field": "path-pattern",
                        "Values": [
                            "/LCMLicenseManager/Service"
                        ]
                    }
                ],
                "ListenerArn": {
                    "Ref": "ServiceLBListener"
                },
                "Priority": 2
            }
        },
        "Instance1GenericServiceListenerRule": {
            "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
            "Properties": {
                "Actions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "Instance1GenericServiceTargetGroup"
                        }
                    }
                ],
                "Conditions": [
                    {
                        "Field": "path-pattern",
                        "Values": [
                            "/instance1LCMGenericService/Service1"
                        ]
                    }
                ],
                "ListenerArn": {
                    "Ref": "ServiceLBListener"
                },
                "Priority": 3
            }
        },
        "ASLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "asimg"
                    ]
                },
                "InstanceType": {
                    "Fn::If": [
                        "West3Region",
                        {
                            "Fn::FindInMap": [
                                "EC2VolumeMap",
                                {
                                    "Ref": "EC2InstanceType"
                                },
                                "west3ec2instancetype"
                            ]
                        },
                        {
                            "Fn::FindInMap": [
                                "EC2VolumeMap",
                                {
                                    "Ref": "EC2InstanceType"
                                },
                                "ec2instancetype"
                            ]
                        }
                    ]
                },
                "SecurityGroups": [
                    {
                        "Ref": "AECPrivateGroup"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "VolumeSize": {
                                "Fn::FindInMap": [
                                    "EC2VolumeMap",
                                    {
                                        "Ref": "EC2InstanceType"
                                    },
                                    "volumesize"
                                ]
                            }
                        }
                    }
                ],
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "<powershell>\n",
                                "$text = '{",
                                "\"PUBLIC_ELB_DNS\":\"",
                                {
                                    "Fn::If": [
                                        "HasHttps",
                                        {
                                            "Ref": "CFDomainName"
                                        },
                                        {
                                            "Fn::GetAtt": [
                                                "cfdistribution",
                                                "DomainName"
                                            ]
                                        }
                                    ]
                                },
                                "\",",
                                "\"PUBLIC_ELB_PROTOCOL\":\"",
                                {
                                    "Fn::If": [
                                        "HasHttps",
                                        "https",
                                        "http"
                                    ]
                                },
                                "\",",
                                "\"PRIVATE_ELB_DNS\":\"",
                                {
                                    "Fn::GetAtt": [
                                        "ServiceLB",
                                        "DNSName"
                                    ]
                                },
                                "\",",
                                "\"RDS_ENDPOINT\":\"",
                                {
                                    "Ref": "RDSDB"
                                },
                                "\",",
                                "\"RDS_USERNAME\":\"",
                                {
                                    "Ref": "DBMasterUser"
                                },
                                "\",",
                                "\"RDS_PASSWORD\":\"",
                                {
                                    "Ref": "DBMasterPassword"
                                },
                                "\"",
                                "}'",
                                "\n",
                                "New-Item -Force -Path 'C:\\Program Files\\LCM\\Acqueon Services\\Data\\serverdetails.json' -value $text -ItemType file",
                                "\n</powershell>\n",
                                "<persist>true</persist>"
                            ]
                        ]
                    }
                }
            }
        },
        "ASGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "LaunchConfigurationName": {
                    "Ref": "ASLaunchConfig"
                },
                "MinSize": "2",
                "MaxSize": "2",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    "AEC",
                                    {
                                        "Fn::Select": [
                                            0,
                                            {
                                                "Fn::Split": [
                                                    "-",
                                                    {
                                                        "Ref": "AWS::StackName"
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "Fn::Select": [
                                            1,
                                            {
                                                "Fn::Split": [
                                                    "-",
                                                    {
                                                        "Ref": "AWS::StackName"
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            ]
                        },
                        "PropagateAtLaunch": "true"
                    }
                ],
                "TargetGroupARNs": [
                    {
                        "Ref": "LCMTargetGroup"
                    },
                    {
                        "Ref": "ScriptEngineTargetGroup"
                    },
                    {
                        "Ref": "LicenseManagerTargetGroup"
                    },
                    {
                        "Ref": "Instance1GenericServiceTargetGroup"
                    }
                ],
                "VPCZoneIdentifier": [
                    {
                        "Ref": "AECSubnetPrivate1"
                    },
                    {
                        "Ref": "AECSubnetPrivate2"
                    }
                ]
            }
        },
        "BastionEC2Instance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "bastionimg"
                    ]
                },
                "InstanceType": "t2.micro",
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "NetworkInterfaces": [
                    {
                        "GroupSet": [
                            {
                                "Ref": "AECRDP"
                            }
                        ],
                        "AssociatePublicIpAddress": "true",
                        "DeviceIndex": "0",
                        "SubnetId": {
                            "Ref": "AECSubnetPublic1"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    "AEC-BH",
                                    {
                                        "Fn::Select": [
                                            0,
                                            {
                                                "Fn::Split": [
                                                    "-",
                                                    {
                                                        "Ref": "AWS::StackName"
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "Fn::Select": [
                                            1,
                                            {
                                                "Fn::Split": [
                                                    "-",
                                                    {
                                                        "Ref": "AWS::StackName"
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "cfdistribution": {
            "Type": "AWS::CloudFront::Distribution",
            "Properties": {
                "DistributionConfig": {
                    "Aliases": {
                        "Fn::If": [
                            "HasHttps",
                            [
                                {
                                    "Ref": "CFDomainName"
                                }
                            ],
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    "ViewerCertificate": {
                        "Fn::If": [
                            "HasHttps",
                            {
                                "AcmCertificateArn": {
                                    "Ref": "CFCertificate"
                                },
                                "SslSupportMethod": "sni-only"
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    "Enabled": "true",
                    "Origins": [
                        {
                            "DomainName": {
                                "Fn::If": [
                                    "HasHttps",
                                    {
                                        "Ref": "AECLBARecord"
                                    },
                                    {
                                        "Fn::GetAtt": [
                                            "AECLB",
                                            "DNSName"
                                        ]
                                    }
                                ]
                            },
                            "Id": "AECOrigin",
                            "CustomOriginConfig": {
                                "HTTPPort": "80",
                                "HTTPSPort": "443",
                                "OriginProtocolPolicy": "match-viewer"
                            }
                        }
                    ],
                    "DefaultCacheBehavior": {
                        "AllowedMethods": [
                            "DELETE",
                            "GET",
                            "HEAD",
                            "OPTIONS",
                            "PATCH",
                            "POST",
                            "PUT"
                        ],
                        "CachedMethods": [
                            "GET",
                            "HEAD",
                            "OPTIONS"
                        ],
                        "ForwardedValues": {
                            "QueryString": "true",
                            "Cookies": {
                                "Forward": "all"
                            }
                        },
                        "TargetOriginId": "AECOrigin",
                        "ViewerProtocolPolicy": {
                            "Fn::If": [
                                "HasHttps",
                                "redirect-to-https",
                                "allow-all"
                            ]
                        }
                    }
                }
            }
        },
        "AECLBARecord": {
            "Type": "AWS::Route53::RecordSet",
            "Condition": "HasHttps",
            "Properties": {
                "AliasTarget": {
                    "DNSName": {
                        "Fn::GetAtt": [
                            "AECLB",
                            "DNSName"
                        ]
                    },
                    "HostedZoneId": {
                        "Fn::GetAtt": [
                            "AECLB",
                            "CanonicalHostedZoneID"
                        ]
                    }
                },
                "HostedZoneId": {
                    "Ref": "DomainHostedZone"
                },
                "Name": {
                    "Fn::Join": [
                        "",
                        [
                            "ELB",
                            {
                                "Ref": "CFDomainName"
                            }
                        ]
                    ]
                },
                "Type": "A"
            }
        },
        "CFARecord": {
            "Type": "AWS::Route53::RecordSet",
            "Condition": "HasHttps",
            "Properties": {
                "AliasTarget": {
                    "DNSName": {
                        "Fn::GetAtt": [
                            "cfdistribution",
                            "DomainName"
                        ]
                    },
                    "HostedZoneId": "Z2FDTNDATAQYW2"
                },
                "HostedZoneId": {
                    "Ref": "DomainHostedZone"
                },
                "Name": {
                    "Ref": "CFDomainName"
                },
                "Type": "A"
            }
        }
    },
    "Outputs": {
        "cfdistributionDomainName": {
            "Value": {
                "Fn::GetAtt": [
                    "cfdistribution",
                    "DomainName"
                ]
            }
        },
        "BastionEC2InstancePublicIp": {
            "Value": {
                "Fn::GetAtt": [
                    "BastionEC2Instance",
                    "PublicIp"
                ]
            }
        }
    }
}
